// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGCheatManager.h"

void UFGCheatManager::InitCheatManager(){ }
void UFGCheatManager::NoCost( bool enabled){ }
bool UFGCheatManager::NoCost_Get(){ return bool(); }
void UFGCheatManager::NoPower( bool enabled){ }
bool UFGCheatManager::NoPower_Get(){ return bool(); }
void UFGCheatManager::NoMessages( bool enabled){ }
bool UFGCheatManager::NoMessages_Get(){ return bool(); }
void UFGCheatManager::TurboMode( bool enabled){ }
bool UFGCheatManager::TurboMode_Get(){ return bool(); }
void UFGCheatManager::GiveItemStacks( TSubclassOf<  UFGItemDescriptor > resource, int32 NumberOfStacks){ }
void UFGCheatManager::GiveItemsSingle( TSubclassOf<  UFGItemDescriptor > resource, int32 NumberOfItems){ }
void UFGCheatManager::PlayerFly( bool flyModeEnabled){ }
bool UFGCheatManager::PlayerFly_Get(){ return bool(); }
void UFGCheatManager::PlayerNoClipModeOnFly( bool gohstMode){ }
bool UFGCheatManager::PlayerNoClipModeOnFly_Get(){ return bool(); }
void UFGCheatManager::ClearGiveItemPopularList(){ }
void UFGCheatManager::GiefALLSchematics(){ }
void UFGCheatManager::GiefAllSchematicsAndPhases(){ }
void UFGCheatManager::GiefAvailableSchematics(){ }
void UFGCheatManager::GiefCheatSchematics(){ }
void UFGCheatManager::GiefStorySchematics(){ }
void UFGCheatManager::GiefStartingResearch(){ }
void UFGCheatManager::RebuildPowerCircuits(){ }
void UFGCheatManager::EnableBuildableTick( bool enable){ }
bool UFGCheatManager::EnableBuildableTick_Get(){ return bool(); }
void UFGCheatManager::EnablePlayerFOV( bool enable){ }
bool UFGCheatManager::EnablePlayerFOV_Get(){ return bool(); }
void UFGCheatManager::DestroyPawn(){ }
void UFGCheatManager::RemoveAllFoliage( int32 maxNumInstances ){ }
void UFGCheatManager::PardonAllPlayers(){ }
void UFGCheatManager::ClearPardon(){ }
void UFGCheatManager::SetTimeOfDay( int32 hour, int32 minute ){ }
int32 UFGCheatManager::SetTimeOfDay_hour_Get(){ return int32(); }
int32 UFGCheatManager::SetTimeOfDay_minute_Get(){ return int32(); }
void UFGCheatManager::ShowFactoryOnly( bool environmentHidden){ }
bool UFGCheatManager::ShowFactoryOnly_Get(){ return bool(); }
void UFGCheatManager::HideFactoryOnly( bool factoryHidden){ }
bool UFGCheatManager::HideFactoryOnly_Get(){ return bool(); }
void UFGCheatManager::DumpAllAvailableRecipes(){ }
void UFGCheatManager::EnableAudioDebug(bool isEnabled){ }
void UFGCheatManager::ToggleAudioDebug(){ }
void UFGCheatManager::SetSlomo( float slomo){ }
void UFGCheatManager::OpenModMap(){ }
void UFGCheatManager::PumpiMode( bool enable){ }
bool UFGCheatManager::PumpiMode_Get(){ return bool(); }
void UFGCheatManager::SplitAllConveyors(){ }
void UFGCheatManager::MergeAllConveyors(){ }
void UFGCheatManager::SetTimeSpeedMultiplier( float speed){ }
void UFGCheatManager::SetFactoryDetailReplication( bool enable){ }
bool UFGCheatManager::SetFactoryDetailReplication_Get(){ return bool(); }
void UFGCheatManager::ResetFuses(){ }
void UFGCheatManager::ToggleCameraMode(){ }
void UFGCheatManager::DumpFactoryStatsToLog(){ }
void UFGCheatManager::GiefSchematicsOfTier( int32 tier){ }
void UFGCheatManager::SetGamePhase( EGamePhase phase){ }
void UFGCheatManager::TestSharedInventoryPtr(){ }
void UFGCheatManager::ForceSpawnCreatures(){ }
void UFGCheatManager::DumpNonDormantActors(){ }
void UFGCheatManager::ToggleAudioLandingDebug(){ }
void UFGCheatManager::DumpAttachedToSkelMesh( bool detailed ){ }
void UFGCheatManager::DumpTicking( bool detailed ){ }
void UFGCheatManager::DumpActiveGPUParticles(){ }
void UFGCheatManager::ReplayBuildingEffects(){ }
void UFGCheatManager::HideAllBuildings( bool inVisibility){ }
bool UFGCheatManager::HideAllBuildings_Get(){ return bool(); }
void UFGCheatManager::RandomizeBuildingsColorSlot( uint8 slotIndex ){ }
void UFGCheatManager::UpdateSessionToOSS(){ }
void UFGCheatManager::VisitAllMapAreas(){ }
void UFGCheatManager::SetAITickDistance( float distance){ }
void UFGCheatManager::DumpPlayerStates(){ }
void UFGCheatManager::EnableInstancingOnFactory( bool enabled){ }
void UFGCheatManager::DumpActorRepresentations(){ }
void UFGCheatManager::DumpSignificanceManagedObjects(){ }
void UFGCheatManager::PurgeInactiveClientsFromSave( bool fetchInventories){ }
void UFGCheatManager::PurgeAllBeaconsFromSave(){ }
void UFGCheatManager::ListItemPickups(){ }
void UFGCheatManager::SetTradingPostLevel( int32 inLevel){ }
void UFGCheatManager::ListUnlockedRecipesAndSchematics(){ }
void UFGCheatManager::SaveWithNewSessionName( const FString& saveName, const FString& sessionName){ }
void UFGCheatManager::GetVehicleInfo(){ }
void UFGCheatManager::RunDebugMetric(){ }
void UFGCheatManager::MCP_Login( FString username, FString password){ }
void UFGCheatManager::MCP_Logout(){ }
void UFGCheatManager::MCP_GetOnlineStatus( int32 localPlayerNum ){ }
void UFGCheatManager::MCP_UpdatePresence( FString key, FString value){ }
void UFGCheatManager::MCP_UpdatePresenceString( FString string){ }
void UFGCheatManager::MCP_LogPresence(){ }
void UFGCheatManager::MCP_GetFriends(){ }
void UFGCheatManager::TriggerPresenceUpdate(){ }
void UFGCheatManager::ShowSequenceList(){ }
void UFGCheatManager::SendInviteToFriend( FString friendName){ }
void UFGCheatManager::DebugCrash(){ }
void UFGCheatManager::ResetHubTutorial(){ }
void UFGCheatManager::ResetSchematics(){ }
void UFGCheatManager::ResetRecipes(){ }
void UFGCheatManager::DumpSchematics(){ }
void UFGCheatManager::FixupBuiltByRecipeInOldSave( bool reapplyRecipeIfBetterMatchFound ){ }
void UFGCheatManager::PrintStatichMeshesHirarchy(){ }
void UFGCheatManager::FlipVehicle(){ }
void UFGCheatManager::ListDebugStartingPoint(){ }
void UFGCheatManager::SetDebugStartingPoint( FName startingPoint){ }
void UFGCheatManager::SetRandomDebugStartingPoint(){ }
void UFGCheatManager::CompleteResearch(){ }
void UFGCheatManager::PurgeAllTrainState(){ }
void UFGCheatManager::ResetAllFactoryLegsToZero( bool repopulateEmptyLegs){ }
void UFGCheatManager::RebuildFactoryLegsOneTileAroundPlayer(){ }
